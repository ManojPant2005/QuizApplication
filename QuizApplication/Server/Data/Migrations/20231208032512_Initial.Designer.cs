// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuizApplication.Server.Data;

#nullable disable

namespace QuizApplication.Server.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231208032512_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("QuizApplication.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("QuizApplication.Server.Models.Domain.Answer", b =>
                {
                    b.Property<Guid>("AnswerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("FkQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("bit");

                    b.HasKey("AnswerId");

                    b.HasIndex("Content")
                        .IsUnique();

                    b.HasIndex("FkQuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("QuizApplication.Server.Models.Domain.MediaFile", b =>
                {
                    b.Property<Guid>("MediaFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<Guid>("FkMediaTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MediaFileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("MediaFileId");

                    b.HasIndex("FkMediaTypeId");

                    b.HasIndex("MediaFileName")
                        .IsUnique();

                    b.ToTable("MediaFiles");
                });

            modelBuilder.Entity("QuizApplication.Server.Models.Domain.MediaType", b =>
                {
                    b.Property<Guid>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mediatype")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("MediaId");

                    b.HasIndex("Mediatype")
                        .IsUnique();

                    b.ToTable("MediaType");

                    b.HasData(
                        new
                        {
                            MediaId = new Guid("9205858c-a471-4104-91a6-e8f331464fac"),
                            Mediatype = "image"
                        },
                        new
                        {
                            MediaId = new Guid("acc14f8b-8dc6-4db1-8714-2bd7b5065031"),
                            Mediatype = "video"
                        });
                });

            modelBuilder.Entity("QuizApplication.Server.Models.Domain.Question", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FkFileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FkUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("bit");

                    b.Property<string>("QuestionPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("TimeLimit")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("QuestionId");

                    b.HasIndex("FkFileId");

                    b.HasIndex("FkUserId");

                    b.HasIndex("QuestionPath")
                        .IsUnique();

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuizApplication.Server.Models.Domain.QuizItem", b =>
                {
                    b.Property<Guid>("QuizItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FkQuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FkUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsScored")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Started_At")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeSpent")
                        .HasColumnType("int");

                    b.HasKey("QuizItemId");

                    b.HasIndex("FkQuestionId");

                    b.HasIndex("FkUserId");

                    b.ToTable("QuizItems");
                });

            modelBuilder.Entity("QuizApplication.Server.Models.Domain.Answer", b =>
                {
                    b.HasOne("QuizApplication.Server.Models.Domain.Question", "Questions")
                        .WithMany("Answers")
                        .HasForeignKey("FkQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizApplication.Server.Models.Domain.MediaFile", b =>
                {
                    b.HasOne("QuizApplication.Server.Models.Domain.MediaType", "MediaTypes")
                        .WithMany("MediaFiles")
                        .HasForeignKey("FkMediaTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MediaTypes");
                });

            modelBuilder.Entity("QuizApplication.Server.Models.Domain.Question", b =>
                {
                    b.HasOne("QuizApplication.Server.Models.Domain.MediaFile", "MediaFiles")
                        .WithMany("Questions")
                        .HasForeignKey("FkFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("QuizApplication.Server.Models.ApplicationUser", "ApplicationUsers")
                        .WithMany("Questions")
                        .HasForeignKey("FkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUsers");

                    b.Navigation("MediaFiles");
                });

            modelBuilder.Entity("QuizApplication.Server.Models.Domain.QuizItem", b =>
                {
                    b.HasOne("QuizApplication.Server.Models.Domain.Question", "Questions")
                        .WithMany("QuizItems")
                        .HasForeignKey("FkQuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("QuizApplication.Server.Models.ApplicationUser", "ApplicationUsers")
                        .WithMany("QuizItems")
                        .HasForeignKey("FkUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUsers");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizApplication.Server.Models.ApplicationUser", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("QuizItems");
                });

            modelBuilder.Entity("QuizApplication.Server.Models.Domain.MediaFile", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("QuizApplication.Server.Models.Domain.MediaType", b =>
                {
                    b.Navigation("MediaFiles");
                });

            modelBuilder.Entity("QuizApplication.Server.Models.Domain.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuizItems");
                });
#pragma warning restore 612, 618
        }
    }
}
